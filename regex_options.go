package onig

type RegexOptions uint

// REGEX_OPTION_NONE no option
const REGEX_OPTION_NONE RegexOptions = 0

// REGEX_OPTION_IGNORECASE ambiguity match on
const REGEX_OPTION_IGNORECASE RegexOptions = 1

// REGEX_OPTION_EXTEND extended pattern form
const REGEX_OPTION_EXTEND = (REGEX_OPTION_IGNORECASE << 1)

// REGEX_OPTION_MULTILINE '.' match with newline
const REGEX_OPTION_MULTILINE = (REGEX_OPTION_EXTEND << 1)

// REGEX_OPTION_SINGLELINE '^' -> '\A', '$' -> '\Z'
const REGEX_OPTION_SINGLELINE = (REGEX_OPTION_MULTILINE << 1)

// REGEX_OPTION_FIND_LONGEST find the longest match
// The REGEX_OPTION_FIND_LONGEST option doesn't work properly during backward search.
const REGEX_OPTION_FIND_LONGEST = (REGEX_OPTION_SINGLELINE << 1)

// REGEX_OPTION_FIND_NOT_EMPTY ignore empty match
const REGEX_OPTION_FIND_NOT_EMPTY = (REGEX_OPTION_FIND_LONGEST << 1)

// REGEX_OPTION_NEGATE_SINGLELINE clear REGEX_OPTION_SINGLELINE which is enabled on SyntaxPosixBasic/SyntaxExtended/SyntaxPerl/SyntaxPerlNG/SyntaxPython/SyntaxJava
const REGEX_OPTION_NEGATE_SINGLELINE = (REGEX_OPTION_FIND_NOT_EMPTY << 1)

// REGEX_OPTION_DONT_CAPTURE_GROUP only named group captured.
const REGEX_OPTION_DONT_CAPTURE_GROUP = (REGEX_OPTION_NEGATE_SINGLELINE << 1)

// REGEX_OPTION_CAPTURE_GROUP named and no-named group captured.
const REGEX_OPTION_CAPTURE_GROUP = (REGEX_OPTION_DONT_CAPTURE_GROUP << 1)

// REGEX_OPTION_NOTBOL
const REGEX_OPTION_NOTBOL = (REGEX_OPTION_CAPTURE_GROUP << 1)

// REGEX_OPTION_NOTEOL
const REGEX_OPTION_NOTEOL = (REGEX_OPTION_NOTBOL << 1)

// REGEX_OPTION_POSIX_REGION
const REGEX_OPTION_POSIX_REGION = (REGEX_OPTION_NOTEOL << 1)

// REGEX_OPTION_CHECK_VALIDITY_OF_STRING
const REGEX_OPTION_CHECK_VALIDITY_OF_STRING = (REGEX_OPTION_POSIX_REGION << 1)

// REGEX_OPTION_IGNORECASE_IS_ASCII Limit IGNORECASE((?i)) to a range of ASCII characters
const REGEX_OPTION_IGNORECASE_IS_ASCII = (REGEX_OPTION_CHECK_VALIDITY_OF_STRING << 3)

// REGEX_OPTION_WORD_IS_ASCII ASCII only word (\w, \p{Word}, [[:word:]])
//
// ASCII only word bound (\b)
const REGEX_OPTION_WORD_IS_ASCII = (REGEX_OPTION_IGNORECASE_IS_ASCII << 1)

// REGEX_OPTION_DIGIT_IS_ASCII ASCII only digit (\d, \p{Digit}, [[:digit:]])
const REGEX_OPTION_DIGIT_IS_ASCII = (REGEX_OPTION_WORD_IS_ASCII << 1)

// REGEX_OPTION_SPACE_IS_ASCII ASCII only space (\s, \p{Space}, [[:space:]])
const REGEX_OPTION_SPACE_IS_ASCII = (REGEX_OPTION_DIGIT_IS_ASCII << 1)

// REGEX_OPTION_POSIX_IS_ASCII ASCII only POSIX properties
// (includes word, digit, space)
// (alnum, alpha, blank, cntrl, digit, graph, lower, print, punct, space, upper, xdigit, word)
const REGEX_OPTION_POSIX_IS_ASCII = (REGEX_OPTION_SPACE_IS_ASCII << 1)

// REGEX_OPTION_TEXT_SEGMENT_EXTENDED_GRAPHEME_CLUSTER Extended Grapheme Cluster mode
const REGEX_OPTION_TEXT_SEGMENT_EXTENDED_GRAPHEME_CLUSTER = (REGEX_OPTION_POSIX_IS_ASCII << 1)

// REGEX_OPTION_TEXT_SEGMENT_WORD Word mode
const REGEX_OPTION_TEXT_SEGMENT_WORD = (REGEX_OPTION_TEXT_SEGMENT_EXTENDED_GRAPHEME_CLUSTER << 1)

const REGEX_OPTION_NOT_BEGIN_STRING = (REGEX_OPTION_TEXT_SEGMENT_WORD << 1)
const REGEX_OPTION_NOT_END_STRING = (REGEX_OPTION_NOT_BEGIN_STRING << 1)
const REGEX_OPTION_NOT_BEGIN_POSITION = (REGEX_OPTION_NOT_END_STRING << 1)
const REGEX_OPTION_CALLBACK_EACH_MATCH = (REGEX_OPTION_NOT_BEGIN_POSITION << 1)
const REGEX_OPTION_MATCH_WHOLE_STRING = (REGEX_OPTION_CALLBACK_EACH_MATCH << 1)

const REGEX_OPTION_MAXBIT = REGEX_OPTION_MATCH_WHOLE_STRING
